'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectPropTypes = undefined;

var _react = require('react');

var _strategies = require('./strategies');

function valueType(props, propName, componentName) {
  var labelInValueShape = _react.PropTypes.shape({
    value: _react.PropTypes.string.isRequired,
    label: _react.PropTypes.string
  });
  if (props.labelInValue) {
    var validate = _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(labelInValueShape), labelInValueShape]);
    var error = validate.apply(undefined, arguments);
    if (error) {
      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + ('when `labelInValue` is `true`, `' + propName + '` should in ') + 'shape of `{ value: string, label?: string }`.');
    }
  } else if (props.treeCheckable && props.treeCheckStrictly) {
    var _validate = _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(labelInValueShape), labelInValueShape]);
    var _error = _validate.apply(undefined, arguments);
    if (_error) {
      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + 'when `treeCheckable` and `treeCheckStrictly` are `true`, ' + ('`' + propName + '` should in shape of `{ value: string, label?: string }`.'));
    }
  } else if (props.multiple && props[propName] === '') {
    return new Error('Invalid prop `' + propName + '` of type `string` supplied to `' + componentName + '`, ' + 'expected `array` when `multiple` is `true`.');
  } else {
    var _validate2 = _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string), _react.PropTypes.string]);
    return _validate2.apply(undefined, arguments);
  }
}

var SelectPropTypes = exports.SelectPropTypes = {
  className: _react.PropTypes.string,
  prefixCls: _react.PropTypes.string,
  multiple: _react.PropTypes.bool,
  filterTreeNode: _react.PropTypes.any,
  showSearch: _react.PropTypes.bool,
  disabled: _react.PropTypes.bool,
  showArrow: _react.PropTypes.bool,
  allowClear: _react.PropTypes.bool,
  defaultOpen: _react.PropTypes.bool,
  open: _react.PropTypes.bool,
  transitionName: _react.PropTypes.string,
  animation: _react.PropTypes.string,
  choiceTransitionName: _react.PropTypes.string,
  onClick: _react.PropTypes.func,
  onChange: _react.PropTypes.func,
  onSelect: _react.PropTypes.func,
  onDeselect: _react.PropTypes.func,
  onSearch: _react.PropTypes.func,
  searchPlaceholder: _react.PropTypes.string,
  placeholder: _react.PropTypes.any,
  inputValue: _react.PropTypes.any,
  value: valueType,
  defaultValue: valueType,
  label: _react.PropTypes.any,
  defaultLabel: _react.PropTypes.any,
  labelInValue: _react.PropTypes.bool,
  dropdownStyle: _react.PropTypes.object,
  drodownPopupAlign: _react.PropTypes.object,
  onDropdownVisibleChange: _react.PropTypes.func,
  maxTagTextLength: _react.PropTypes.number,
  showCheckedStrategy: _react.PropTypes.oneOf([_strategies.SHOW_ALL, _strategies.SHOW_PARENT, _strategies.SHOW_CHILD]),
  treeCheckStrictly: _react.PropTypes.bool,
  treeIcon: _react.PropTypes.bool,
  treeLine: _react.PropTypes.bool,
  treeDefaultExpandAll: _react.PropTypes.bool,
  treeCheckable: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.node]),
  treeNodeLabelProp: _react.PropTypes.string,
  treeNodeFilterProp: _react.PropTypes.string,
  treeData: _react.PropTypes.array,
  treeDataSimpleMode: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.object]),
  loadData: _react.PropTypes.func
};